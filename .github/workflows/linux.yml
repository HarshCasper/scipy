name: Linux Tests

on:
  push:
    branches:
      - meson
  pull_request:
    branches:
      - meson
  schedule:
    - cron: "0 0 * * *" # nightly (done to check changes in Meson master frequently)

env:
  CCACHE_DIR: "${{ github.workspace }}/.ccache"
  INSTALLDIR: "installdir"

jobs:
<<<<<<< HEAD
  test_meson:
    name: Meson build
    # If using act to run CI locally the github object does not exist and the usual skipping should not be enforced
    if: "github.repository != '' || github.repository == 'rgommers/scipy' && !contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip github]') && !contains(github.ref, 'maintenance/') && !contains(github.base_ref, 'maintenance/')"
=======
  Python-38-dbg:
    name: Python 3.8-dbg
    if: "github.repository == 'scipy/scipy' && !contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip github]')"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Configuring Test Environment
        run: |
          sudo apt-get update
          sudo apt install python3.8-dbg python3.8-dev libatlas-base-dev liblapack-dev gfortran libgmp-dev libmpfr-dev libsuitesparse-dev ccache swig libmpc-dev
          free -m
          python3.8-dbg --version # just to check
          export NPY_NUM_BUILD_JOBS=2
          uname -a
          df -h
          ulimit -a
          set -e -o pipefail
          mkdir builds
          cd builds
      - name: Installing packages
        run: |
          python3.8-dbg -c 'import sys; print("Python debug build:", hasattr(sys, "gettotalrefcount"))'
          python3.8-dbg -m pip install --upgrade pip "setuptools<60.0" wheel
          python3.8-dbg -m pip install --upgrade numpy cython pytest pytest-xdist pybind11
          python3.8-dbg -m pip install --upgrade mpmath gmpy2==2.1.0rc1 pythran threadpoolctl
          python3.8-dbg -m pip uninstall -y nose
          cd ..
      - name: Building SciPy
        run: python3.8-dbg -u runtests.py -g -j2 --build-only
      - name: Testing SciPy
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          python3.8-dbg -u runtests.py -g -j2 -m fast -- -rfEX --durations=10 2>&1 | tee runtests.log
          python3.8-dbg tools/validate_runtests_log.py fast < runtests.log
      - name: Dynamic symbol hiding check on Linux
        if: ${{ github.event_name == 'pull_request' }}
        run: ./tools/check_pyext_symbol_hiding.sh build

  test_numpy_main:
    name: NumPy main
    if: "github.repository == 'scipy/scipy' && !contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip github]') && !contains(github.ref, 'maintenance/') && !contains(github.base_ref, 'maintenance/')"
>>>>>>> upstream/master
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Ubuntu dependencies
      run: |
        # NOTE: not the same OpenBLAS version as in upstream CI (I'm being lazy here)
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev libatlas-base-dev liblapack-dev gfortran libgmp-dev libmpfr-dev libsuitesparse-dev ccache libmpc-dev

<<<<<<< HEAD
    - name: Caching Python dependencies
      uses: actions/cache@v2
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip
=======
    - name: Install packages
      run: |
        which python
        pip install --user git+https://github.com/numpy/numpy.git
        python -m pip install --user "setuptools<60.0" wheel cython pytest pybind11 pytest-xdist
        pip install --user git+https://github.com/serge-sans-paille/pythran.git
        python -m pip install -r mypy_requirements.txt
>>>>>>> upstream/master

    - name: Install Python packages
      run: |
        python -m pip install numpy setuptools wheel cython pytest pytest-xdist pybind11 pytest-xdist mpmath gmpy2 pythran ninja
        python -m pip install git+https://github.com/mesonbuild/meson.git@master

    - name:  Prepare compiler cache
      id:    prep-ccache
      shell: bash
      run: |
        mkdir -p "${CCACHE_DIR}"
        echo "::set-output name=dir::$CCACHE_DIR"
        NOW=$(date -u +"%F-%T")
        echo "::set-output name=timestamp::${NOW}"

    - name: Setup compiler cache
      uses:  actions/cache@v2
      id:    cache-ccache
      # Reference: https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
      # NOTE: The caching strategy is modeled in a way that it will always have a unique cache key for each workflow run
      # (even if the same workflow is run multiple times). The restore keys are not unique and for a partial match, they will
      # return the most recently created cache entry, according to the GitHub Action Docs.
      with:
        path: ${{ steps.prep-ccache.outputs.dir }}
        # Restores ccache from either a previous build on this branch or on master
        key:  ${{ github.workflow }}-${{ matrix.python-version }}-ccache-linux-${{ steps.prep-ccache.outputs.timestamp }}
        # This evaluates to `Linux Tests-3.9-ccache-linux-` which is not unique. As the CI matrix is expanded, this will
        # need to be updated to be unique so that the cache is not restored from a different job altogether.
        restore-keys: |
          ${{ github.workflow }}-${{ matrix.python-version }}-ccache-linux-

    - name: Setup build and install scipy
      run: |
        python dev.py -j 2 --build-only --werror

    - name: Ccache performance
      shell: bash -l {0}
      run: ccache -s

    - name: Check installation
      run: |
        pushd tools
        python check_installation.py ${{ env.INSTALLDIR }}
        popd

    - name: Test SciPy
      run: |
        export OMP_NUM_THREADS=2
        python dev.py -n -j 2
